import sqlite3
import tkinter as tk
from tkinter import messagebox
from datetime import datetime

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para criar as tabelas iniciais se não existirem
def create_tables():
    conn, cursor = connect_db()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Autores (
        AutorID INTEGER PRIMARY KEY AUTOINCREMENT,
        Nome TEXT NOT NULL,
        Nacionalidade TEXT NOT NULL
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Livros (
        LivroID INTEGER PRIMARY KEY AUTOINCREMENT,
        Titulo TEXT NOT NULL,
        AutorID INTEGER,
        AnoPublicacao INTEGER,
        Genero TEXT,
        Disponibilidade TEXT DEFAULT 'disponível',
        FOREIGN KEY (AutorID) REFERENCES Autores (AutorID)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Emprestimos (
        EmprestimoID INTEGER PRIMARY KEY AUTOINCREMENT,
        LivroID INTEGER,
        DataEmprestimo DATE,
        DataDevolucao DATE,
        NomeUsuario TEXT,
        Multa DECIMAL(5,2) DEFAULT 0,
        DataDevolucaoPrevista DATE,
        Status TEXT DEFAULT 'ativo',
        FOREIGN KEY (LivroID) REFERENCES Livros (LivroID)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Usuarios (
        UsuarioID INTEGER PRIMARY KEY AUTOINCREMENT,
        Nome TEXT NOT NULL,
        Email TEXT NOT NULL UNIQUE
    )''')

    conn.commit()
    conn.close()

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if nome and nacionalidade:  # Validação de entrada
        conn, cursor = connect_db()
        cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
        conn.commit()
        conn.close()
        messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
        entry_nome_autor.delete(0, tk.END)
        entry_nacionalidade_autor.delete(0, tk.END)
    else:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos.')

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    autor_id = entry_autor_id.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    if titulo and autor_id and ano and genero:  # Validação de entrada
        conn, cursor = connect_db()
        cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                       (titulo, autor_id, ano, genero))
        conn.commit()
        conn.close()
        messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
        entry_titulo_livro.delete(0, tk.END)
        entry_autor_id.delete(0, tk.END)
        entry_ano_livro.delete(0, tk.END)
        entry_genero_livro.delete(0, tk.END)
        view_livros()  # Atualiza a lista de livros
    else:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos.')

# Função para adicionar empréstimo
def add_emprestimo():
    livro_id = entry_livro_id.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    if livro_id and data_emp and data_dev and usuario:  # Validação de entrada
        conn, cursor = connect_db()
        cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES (?, ?, ?, ?)',
                       (livro_id, data_emp, data_dev, usuario))
        conn.commit()
        conn.close()
        messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
        entry_livro_id.delete(0, tk.END)
        entry_data_emp.delete(0, tk.END)
        entry_data_dev.delete(0, tk.END)
        entry_nome_usuario.delete(0, tk.END)
        view_emprestimos()  # Atualiza a lista de empréstimos
    else:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos.')

# Função para marcar um livro como devolvido
def devolver_livro():
    livro_id = entry_livro_id.get()
    if livro_id:
        conn, cursor = connect_db()
        cursor.execute('UPDATE Emprestimos SET Status = "devolvido" WHERE LivroID = ? AND Status = "ativo"', (livro_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo('Sucesso', 'Livro devolvido com sucesso!')
        view_emprestimos()  # Atualiza a lista de empréstimos
    else:
        messagebox.showerror('Erro', 'Por favor, informe o LivroID para devolução.')

# Função para calcular multas
def calcular_multa():
    livro_id = entry_livro_id.get()
    if livro_id:
        conn, cursor = connect_db()
        cursor.execute('SELECT DataDevolucaoPrevista, DataDevolucao FROM Emprestimos WHERE LivroID = ?', (livro_id,))
        result = cursor.fetchone()
        if result:
            data_prevista, data_devolucao = result
            if data_devolucao is not None:
                # Calcular multa se devolução for atrasada
                data_prevista = datetime.strptime(data_prevista, '%Y-%m-%d')
                data_devolucao = datetime.strptime(data_devolucao, '%Y-%m-%d')
                if data_devolucao > data_prevista:
                    dias_atraso = (data_devolucao - data_prevista).days
                    multa = dias_atraso * 1.00  # R$1.00 por dia de atraso
                    messagebox.showinfo('Multa', f'Multa total: R${multa:.2f}')
                else:
                    messagebox.showinfo('Multa', 'Nenhuma multa, livro devolvido a tempo!')
            else:
                messagebox.showinfo('Erro', 'Este livro ainda não foi devolvido.')
        else:
            messagebox.showerror('Erro', 'Livro não encontrado nos empréstimos.')
        conn.close()
    else:
        messagebox.showerror('Erro', 'Por favor, informe o LivroID para calcular a multa.')

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro)

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE Status = "ativo"')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar todos os usuários
def view_usuarios():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Usuarios')
    usuarios = cursor.fetchall()
    conn.close()
    usuarios_list.delete(0, tk.END)
    for usuario in usuarios:
        usuarios_list.insert(tk.END, usuario)

# Função para adicionar usuário
def add_usuario():
    nome = entry_nome_usuario_add.get()
    email = entry_email_usuario.get()
    if nome and email:  # Validação de entrada
        conn, cursor = connect_db()
        try:
            cursor.execute('INSERT INTO Usuarios (Nome, Email) VALUES (?, ?)', (nome, email))
            conn.commit()
            messagebox.showinfo('Sucesso', 'Usuário adicionado com sucesso!')
            entry_nome_usuario_add.delete(0, tk.END)
            entry_email_usuario.delete(0, tk.END)
            view_usuarios()  # Atualiza a lista de usuários
        except sqlite3.IntegrityError:
            messagebox.showerror('Erro', 'O e-mail já está em uso.')
        conn.close()
    else:
        messagebox.showerror('Erro', 'Por favor, preencha todos os campos.')

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor')
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor).grid(row=2, columnspan=2)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro')
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='AutorID:').grid(row=1, column=0)
entry_autor_id = tk.Entry(frame_livro)
entry_autor_id.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano de Publicação:').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro).grid(row=4, columnspan=2)

# Frame para empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='LivroID:').grid(row=0, column=0)
entry_livro_id = tk.Entry(frame_emprestimo)
entry_livro_id.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data de Empréstimo:').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data de Devolução:').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome do Usuário:').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo).grid(row=4, columnspan=2)
tk.Button(frame_emprestimo, text='Devolver Livro', command=devolver_livro).grid(row=5, columnspan=2)
tk.Button(frame_emprestimo, text='Calcular Multa', command=calcular_multa).grid(row=6, columnspan=2)

# Frame para visualizar livros
frame_visualizar = tk.LabelFrame(root, text='Livros Cadastrados')
frame_visualizar.grid(row=3, column=0, padx=10, pady=10)

livros_list = tk.Listbox(frame_visualizar, width=50)
livros_list.pack()

# Frame para visualizar empréstimos
frame_visualizar_emp = tk.LabelFrame(root, text='Empréstimos Ativos')
frame_visualizar_emp.grid(row=4, column=0, padx=10, pady=10)

emprestimos_list = tk.Listbox(frame_visualizar_emp, width=50)
emprestimos_list.pack()

# Frame para adicionar usuários
frame_usuario = tk.LabelFrame(root, text='Adicionar Usuário')
frame_usuario.grid(row=5, column=0, padx=10, pady=10)

tk.Label(frame_usuario, text='Nome:').grid(row=0, column=0)
entry_nome_usuario_add = tk.Entry(frame_usuario)
entry_nome_usuario_add.grid(row=0, column=1)

tk.Label(frame_usuario, text='Email:').grid(row=1, column=0)
entry_email_usuario = tk.Entry(frame_usuario)
entry_email_usuario.grid(row=1, column=1)

tk.Button(frame_usuario, text='Adicionar Usuário', command=add_usuario).grid(row=2, columnspan=2)

# Frame para visualizar usuários
frame_visualizar_usuarios = tk.LabelFrame(root, text='Usuários Cadastrados')
frame_visualizar_usuarios.grid(row=6, column=0, padx=10, pady=10)

usuarios_list = tk.Listbox(frame_visualizar_usuarios, width=50)
usuarios_list.pack()

# Botão para visualizar todos os registros
tk.Button(root, text='Visualizar Livros', command=view_livros).grid(row=7, column=0, padx=10, pady=10)
tk.Button(root, text='Visualizar Empréstimos', command=view_emprestimos).grid(row=8, column=0, padx=10, pady=10)
tk.Button(root, text='Visualizar Usuários', command=view_usuarios).grid(row=9, column=0, padx=10, pady=10)

create_tables()
root.mainloop()
